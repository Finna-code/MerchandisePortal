// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  user
  dept_head
  admin
}

enum OrderType {
  individual
  group
}

enum OrderStatus {
  cart
  pending
  paid
  ready
  delivered
  canceled
}

enum FulfillmentType {
  delivery
  pickup
}

enum ReviewVisibility {
  public
  hidden
}

enum VerificationTokenType {
  verify
  reset
  invite
}

model Dept {
  id     Int     @id @default(autoincrement())
  name   String  @unique
  users  User[]
  orders Order[]
}

model User {
  id           Int      @id @default(autoincrement())
  name         String
  email        String   @unique
  passwordHash String
  role         Role     @default(user)
  deptId       Int?
  dept         Dept?    @relation(fields: [deptId], references: [id])
  orders       Order[]
  reviews      Review[]
  createdAt    DateTime @default(now())
  emailVerifiedAt DateTime?
  verificationTokens VerificationToken[]
  invitesSent Invite[] @relation("InvitesSent")
  events       OrderEvent[]
}

model Product {
  id          Int         @id @default(autoincrement())
  name        String
  slug        String      @unique
  description String
  price       Decimal     @db.Decimal(10, 2)
  currency    String      @default("INR")
  images      Json
  category    String
  stock       Int         @default(0)
  active      Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  ratingCount Int         @default(0)
  ratingSum   Int         @default(0)
  items       OrderItem[]
  reviews     Review[]
}

model Order {
  id               Int               @id @default(autoincrement())
  type             OrderType         @default(individual)
  status           OrderStatus       @default(cart)
  userId           Int
  user             User              @relation(fields: [userId], references: [id])
  deptId           Int?
  dept             Dept?             @relation(fields: [deptId], references: [id])
  subtotal         Int               @default(0)
  tax              Int               @default(0)
  total            Int               @default(0)
  currency         String            @default("INR")
  fulfillmentType  FulfillmentType?
  shippingLine1    String?
  shippingLine2    String?
  shippingCity     String?
  shippingState    String?
  shippingPincode  String?
  shippingPhone    String?
  pickupPoint      String?
  pickupSlotStart  DateTime?
  pickupSlotEnd    DateTime?
  windowStart      DateTime?
  windowEnd        DateTime?
  invoiceNo        String?           @unique
  paidAt           DateTime?
  readyAt          DateTime?
  deliveredAt      DateTime?
  cartUserId       Int?              @unique
  version          Int               @default(0)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  items            OrderItem[]
  payment          Payment?
  reminders        Reminder[]
  events           OrderEvent[]
}

model OrderItem {
  id         Int      @id @default(autoincrement())
  orderId    Int
  order      Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId  Int
  product    Product  @relation(fields: [productId], references: [id])
  variantId  String?
  qty        Int
  unitPrice  Int
  currency   String   @default("INR")
  capturedAt DateTime @default(now())

  @@unique([orderId, productId, variantId])
}

model Review {
  id         Int              @id @default(autoincrement())
  productId  Int
  product    Product          @relation(fields: [productId], references: [id], onDelete: Cascade)
  userId     Int
  user       User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  rating     Int
  body       String
  visibility ReviewVisibility @default(public)
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt

  @@unique([productId, userId])
}

model Payment {
  id              Int      @id @default(autoincrement())
  orderId         Int      @unique
  order           Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  razorpayOrderId String   @unique
  razorpayPayId   String?
  amount          Int
  currency        String   @default("INR")
  status          String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Reminder {
  id          Int       @id @default(autoincrement())
  orderId     Int
  order       Order     @relation(fields: [orderId], references: [id], onDelete: Cascade)
  kind        String // 'deadline' | 'pickup'
  scheduledAt DateTime
  sentAt      DateTime?
}

model OrderEvent {
  id        Int      @id @default(autoincrement())
  orderId   Int
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  type      String
  at        DateTime @default(now())
  byUserId  Int?
  byUser    User?    @relation(fields: [byUserId], references: [id])
  meta      Json?
}

model VerificationToken {
  id         Int                   @id @default(autoincrement())
  type       VerificationTokenType
  tokenHash  String                @unique
  email      String?
  userId     Int?
  user       User?                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt  DateTime
  createdAt  DateTime              @default(now())

  @@index([type, email])
  @@index([type, userId])
}

model Invite {
  id          Int      @id @default(autoincrement())
  email       String   @unique
  role        Role     @default(user)
  tokenHash   String   @unique
  invitedById Int
  invitedBy   User     @relation("InvitesSent", fields: [invitedById], references: [id])
  expiresAt   DateTime
  acceptedAt  DateTime?
  createdAt   DateTime @default(now())
}
